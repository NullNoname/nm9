package cx.it.nullpo.nm9.engine.script;

import java.io.IOException;
import java.io.Reader;

import cx.it.nullpo.nm9.engine.game.GameManager;

/**
 * Base class of NullpoMino Script Host
 * @author NullNoname
 */
public class ScriptHost {
	/**
	 * A method for shutdown routines.
	 * Game applications should call this if the game ends.
	 * Subclasses can override this method to add their own shutdown routines.
	 */
	public void shutdown() {
	}

	/**
	 * Called at the beginning of game engine update.
	 * Subclasses can override this method to add their own startup routines.
	 * @param manager GameManager
	 */
	public void begin(GameManager manager) {
	}

	/**
	 * Called at the end of game engine update.
	 * Subclasses can override this method to add their own cleanup routines.
	 * @param manager GameManager
	 */
	public void end(GameManager manager) {
	}

	/**
	 * Call a function and get a result from it.
	 * Subclasses should override this method.
	 * @param funcName Function name
	 * @param args Parameters
	 * @return Result of the function
	 * @throws NoSuchFunctionException (runtime) When the specified function doesn't exist
	 * @throws InvalidFunctionException (runtime) When the specified function isn't valid
	 */
	public Object call(String funcName, Object... args) throws InvalidFunctionException {
		throw new NoSuchFunctionException("This ScriptHost is a dummy implementation. funcName:" + funcName);
	}

	/**
	 * Call a function and get a result from it.
	 * If the function doesn't exist, it will return specified default value.
	 * @param funcName Function name
	 * @param defResult Default return value when the function doesn't exist
	 * @param args Parameters
	 * @return Result of the function if the function exists, defResult otherwise.
	 */
	public Object callDef(String funcName, Object defResult, Object... args) {
		try {
			return call(funcName, args);
		} catch (InvalidFunctionException e) {
			return defResult;
		}
	}

	/**
	 * Call a function and get a result from it. Returns null if the function doesn't exist.
	 * @param funcName Function name
	 * @param args Parameters
	 * @return Result of the function if the function exists, null otherwise.
	 */
	public Object callNull(String funcName, Object... args) {
		try {
			return call(funcName, args);
		} catch (InvalidFunctionException e) {
			return null;
		}
	}

	/**
	 * Call a function and get a boolean result from it. Returns false if the function doesn't exist.
	 * @param funcName Function name
	 * @param args Parameters
	 * @return boolean result of the function if the function exists, false otherwise.
	 */
	public boolean callBoolean(String funcName, Object... args) {
		try {
			Object result = call(funcName, args);
			return Boolean.parseBoolean(result.toString());
		} catch (InvalidFunctionException e) {
			return false;
		}
	}

	/**
	 * Call a function and get a double result from it. Returns Double.Nan if the function doesn't exist.
	 * @param funcName Function name
	 * @param args Parameters
	 * @return double result of the function if the function exists, Double.NaN otherwise.
	 */
	public double callDouble(String funcName, Object... args) {
		try {
			Object result = call(funcName, args);
			return Double.parseDouble(result.toString());
		} catch (InvalidFunctionException e) {
			return Double.NaN;
		} catch (NumberFormatException e) {
			return Double.NaN;
		}
	}

	/**
	 * Evaluate a source string and get the result from it.
	 * Subclasses should override this method.
	 * @param source Source string
	 * @param sourceName A string describing the source (used for error reporting and debugging)
	 * @param lineno The starting line number (used for error reporting and debugging)
	 * @return Result
	 */
	public Object evalString(String source, String sourceName, int lineno) {
		return null;
	}

	/**
	 * Evaluate a source from Reader and get the result from it.
	 * Subclasses should override this method.
	 * @param reader The Reader to get script source from
	 * @param sourceName A string describing the source (used for error reporting and debugging)
	 * @param lineno The starting line number (used for error reporting and debugging)
	 * @return Result
	 * @throws IOException If an IOException was generated by the Reader
	 */
	public Object evalReader(Reader reader, String sourceName, int lineno) throws IOException {
		return null;
	}

	/**
	 * Get the speicifed variable from the script's context.
	 * Subclasses should override this method.
	 * @param varName Variable name
	 * @return The variable
	 */
	public Object get(String varName) {
		return null;
	}

	/**
	 * Set the speicifed variable to the script's context.
	 * Subclasses should override this method.
	 * @param varName Variable name
	 * @param value Variable value
	 */
	public void set(String varName, Object value) {
	}

	/**
	 * Check if specified variable exists in the script's context.
	 * Subclasses should override this method.
	 * @param varName Variable name
	 * @return true if the variable exist
	 */
	public boolean has(String varName) {
		return false;
	}

	/**
	 * Check if specified function exists in the script's context.
	 * Subclasses should override this method.
	 * @param varName Function name
	 * @return true if the function exist
	 */
	public boolean hasFunction(String funcName) {
		return false;
	}
}
